#######################################################################################################################################
#application.properties文件加载
#SpringBoot提供的@Value或者@ConfigurationProperties读取properties配置文件，发现会有中文乱码的问题
#SpringBoot版本为2.0.3,查看源码，读取配置文件的地方在org.springframework.boot.env.loadProperties，进而找到org.springframework.boot.env.OriginTrackedPropertiesLoader类
#关键代码：
#CharacterReader(Resource resource) throws IOException {
#	this.reader = new LineNumberReader(new InputStreamReader(
#			resource.getInputStream(), StandardCharsets.ISO_8859_1));
#}
#这里读取配置文件时，编码写死为ISO_8859_1了。也就是说不论application.properties文件被设置为哪种编码格式，最终还是以ISO-8859-1的编码格式进行加载。

#自定义配置文件
#采用@PropertySource(value=”classpath:book.properties”, encoding=”UTF-8”)方式读取配置文件可按照UTF-8的方式读取编码，而不是ISO-8859-1。注意文件名不能是springboot默认的application.properties文件名称。
#@PropertySource配置的加载文件由ConfigurationClassParser.processPropertySource()进行解析，EncodedResource类决定最后由哪种编码格式加载文件，

#spring Boot项目中的application.properties配置文件可以出现在如下2个位置：
#classpath下的config文件夹
#classpath下。
#如果这2个位置都有application.properties文件，那么加载的优先级从1到2依次降低
#######################################################################################################################################

#Spring Boot中约定的不同环境下配置文件名称规则为application-{profile}.properties,profile占位符表示当前环境的名称
#application-dev.properties和application-prod.properties分别表示开发环境你中的配置和生产环境中的配置。
#dev表示使用application-dev.properties配置文件启动项目，若将dev改为prod，则表示使用application-prod.properties启动项目
spring.profiles.active=dev