#打包war包的时候，application.properties配置的server.port和server.servlet.context-path就无效了，需跟进war包容器的配置
server.port=8081
#spring.mvc.view.prefix=/WEB-INF/jsp/
#spring.mvc.view.suffix=.jsp

#######################################################################################################################################
#SpringBoot为Thymeleaf提供了自动化配置类ThymeleafAutoConfiguration，由源码可以看到，默认的模板位置在classpath:/templates/，默认的模板后缀为.html。
#如果想对默认的Thymeleaf配置参数进行自定义配置，那么可以直接在application.properties中进行配置，部分常见的配置如下：
#######################################################################################################################################
#是否开启缓存，开发时可设置为false，默认为true
spring.thymeleaf.cache=true
#是否检查模板是否存在，默认为true
spring.thymeleaf.check-template=true
#是否检查模板位置是否存在，默认为true
spring.thymeleaf.check-template-location=true
#模板文件编码
spring.thymeleaf.encoding=UTF-8
#模板文件位置
spring.thymeleaf.prefix=classpath:/templates/
#Content-Type配置
spring.thymeleaf.servlet.content-type=text/html
#模板文件后缀
spring.thymeleaf.suffix=.html

#######################################################################################################################################
#SpringBoot中对于SpringMVC的自动糊配置都在WebMvcAutoConfiguration类中，因此对于默认静态资源过滤策略可以从这个类中一窥究竟。
#在WebMvcAutoConfiguration类中有一个静态内部类WebMvcAutoConfigurationAdapter，实现了WebMvcConfigurer接口。
#WebMvcConfigurer接口中有一个方法addResourceHandlers是用来配置静态资源过滤的。方法在WebMvcAutoConfigurationAdapter类中得到了实现。
#SpringBoot在这里进行了默认的静态资源过滤配置(即访问URL)，其中staticPathPattern默认定义在WebMvcProperties中，定义内容如下：
#private String staticPathPattern = "/**";
#this.resourceProperties.getStaticLocations()获取到的默认静态资源位置定义在ResourceProperties中，代码如下：
#	private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {
#			"classpath:/META-INF/resources/", "classpath:/resources/",
#			"classpath:/static/", "classpath:/public/" };
#而在WebMvcAutoConfiguration的getResourceLocations方法中，对这4个静态资源位置做了扩充，代码如下：
#		static String[] getResourceLocations(String[] staticLocations) {
#			String[] locations = new String[staticLocations.length
#					+ SERVLET_LOCATIONS.length];
#			System.arraycopy(staticLocations, 0, locations, 0, staticLocations.length);
#			System.arraycopy(SERVLET_LOCATIONS, 0, locations, staticLocations.length,
#					SERVLET_LOCATIONS.length);
#			return locations;
#		}
#SERVLET_LOCATIONS的定义就是一个{"/"}。
#综上可以看到，SpringBoot默认会过滤所有的静态资源，而静态资源的位置一共有5个，分别是"classpath:/META-INF/resources/"、"classpath:/resources/"、
#"classpath:/static/"、 "classpath:/public/"以及"/"，也就是说可以将静态资源放到5个位置中的任意一个。注意，按照定义的顺序5个静态资源的优先级依次降低。
#但是一般情况下，SpringBoot项目不需要webapp目录，所以第5个"/"可以暂不考虑
#例如将p1.png放在classpath:/META-INF/resources/目录下，在浏览器输入"http://server01:8081/p1.png"即可看到p1.png
#如果默认的静态资源过滤策略不能满足要求，也可以自定义资源过滤策略，自定义过滤策略有两种方式：
#1.在配置文件中定义
#可以在application.properties中直接定义过滤规则和静态资源位置，代码如下：
#spring.mvc.static-path-pattern=/image/**
#spring.resources.static-locations=classpath:/image/
#过滤规则(即访问URL)为/image/**，静态资源位置为classpath:/image/
#重新启动项目，在浏览器输入"http://server01:8081/image/p1.png"，即可看到classpath:/image/目录下的资源
#2.通过Java编码方式来定义，此时只需要实现WebMvcConfigurer接口即可，然后实现该接口的addResourceHandlers方法。
#######################################################################################################################################
#spring.mvc.static-path-pattern=/image/**
#spring.resources.static-locations=classpath:/image/

#######################################################################################################################################
#SpringBoot提供的自动配置非常强大，某些情况下，自动配置的功能可能不符合我们的需求，需要我们自定义配置，这个时候就需要排除/禁用SpringBoot某些类的自动化配置了。
#比如：数据源、邮件，这些都是提供了自动配置的，如需要排除SpringBoot的自动化配置，自己来自定义则可以通过在配置文件中指定参数spring.autoconfigure.exclude进行排除
#######################################################################################################################################
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration
##或者还可以这样写
#spring.autoconfigure.exclude[0]=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
#spring.autoconfigure.exclude[1]=org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration
logging.config=classpath:log/logback-spring.xml

#######################################################################################################################################
#配置数据源和mybatis的配置。
#######################################################################################################################################
#mapper xml 文件地址
mybatis.mapper-locations=classpath*:mapper/*Mapper.xml
# typeAliasesPackage：它一般对应我们的实体类所在的包，这个时候会自动取对应包中不包括包名的简单类名作为包括包名的别名。多个package之间可以用逗号或者分号等来进行分隔。(value的值一定要是包的全名)
# 设置这个以后再Mapper配置文件中在parameterType 的值就不用写成全路径名了
mybatis.type-aliases-package=org.gen.springboot.bean
#数据库url	
spring.datasource.url=jdbc:mysql://server01:3306/springmvc?useUnicode=true&characterEncoding=utf-8&useServerPrepStmts=true&serverTimezone=UTC
#数据库用户名
spring.datasource.username=root
#数据库密码
spring.datasource.password=123456
#数据库驱动
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#换成 druid
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#配置初始化大小、最小、最大 
#通常来说，只需要修改initialSize、minIdle、maxActive
spring.datasource.druid.initialSize=8
spring.datasource.druid.minIdle=1
spring.datasource.druid.maxActive=20
#配置获取连接等待超时的时间
spring.datasource.druid.maxWait=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
